#!/usr/bin/env python3
# https://docs.python.org/3/library/argparse.html
from __future__ import annotations

import argparse
from os import getenv
import json
import sys
from functools import partial
from pathlib import Path
from typing import Optional, cast, TypedDict, Union, Dict
from pprint import pprint, pformat


assert sys.version_info >= (3, 8), "Unsupported Python version"

ROOT = Path(__file__).resolve().parent
PLATFORM = sys.platform
# platform.system()
DEBUG = getenv("DEBUG", False)

eprint = partial(print, file=sys.stderr)


class DotfileSetup(TypedDict):
    source: Union[str, Path]
    target: Union[str, Path]
    is_dir: bool


# explict `Dict` for compatibility reason in python < 3.10
Config = Dict[str, DotfileSetup]


def load_mappings(map_fname: Path) -> Config:
    with open(map_fname) as fh:
        data = json.load(fh)
    return data


def search_mapping_file() -> Optional[Path]:
    files = tuple(ROOT.glob("mappings.json"))
    if len(files) == 0:
        return None
    return files[0]


def link_dotfiles(names: Optional[list[str]], config: Config) -> None:
    ...


def show_current_status(names: Optional[list[str]], config: Config) -> None:
    ...


def print_config(names: Optional[list[str]], config: Config) -> None:
    if names is None:
        pprint(config, compact=False)
    else:  # specified names
        for each in names:
            print(f"{each}: {pformat(config.get(each, 'Not found'))}")


def build_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--config", dest="config_file", type=Path)
    parser.add_argument("-f", "--force", action="store_true")

    run_group = parser.add_mutually_exclusive_group(required=False)
    run_group.add_argument("-p", "--print", action="store_true")
    run_group.add_argument("-s", "--status", action="store_true")
    run_group.add_argument("-e", "--execute", action="store_true")
    run_group.add_argument("-r", "--dry", action="store_true")

    range_group = parser.add_mutually_exclusive_group(required=True)
    range_group.add_argument("-a", "--all", action="store_true")
    range_group.add_argument(
        "-n", "--name", dest="names", action="extend", nargs="+", type=str
    )

    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true")
    parser.add_argument("--version", action="store_true")
    return parser


def main():
    parser = build_arg_parser()
    args = parser.parse_args()

    if DEBUG:
        print("[DEBUG] Input args:", repr(args))

    if (config_fname := args.config_file) is not None:
        if not cast(Path, config_fname).is_file():
            eprint(f"Cannot found input file `{config_fname}`")
            sys.exit(1)
    else:
        config_fname = search_mapping_file()
        if config_fname is None:
            eprint("Do not found `mappings.json` file.")

    if DEBUG:
        print("[DEBUG] Config file path:", config_fname)
    config_json = load_mappings(cast(Path, config_fname))

    if args.print:
        print_config(args.names, config_json)
        sys.exit(0)
    if args.status:
        ...
        sys.exit(0)
    if args.execute:
        ...
        sys.exit(0)
    if args.dry:
        ...


if __name__ == "__main__":
    main()
